if (length(getvariable("main__", "")) == 0 or getvariable("main__", "") == currentscriptname) {
    #?currentscriptname;

    switchtodesign;
    groupscope("::Root Element");
    deleteall;
    clear;
    #main__ = currentscriptname;

    waveguides = false;
    record_all = true;
    annotate_all = 3;
}


# Create Compond Element
groupscope("::Root Element");
unselectall;
createcompound();
set("name", "ring_resonator");

# Adding Port
addport("ring_resonator", "lt_o", "bidirectional", "Optical Signal", "Left", 0.25);
addport("ring_resonator", "lb_o", "bidirectional", "Optical Signal", "Left", 0.75);
addport("ring_resonator", "rt_o", "bidirectional", "Optical Signal", "Right", 0.25);
addport("ring_resonator", "rb_o", "bidirectional", "Optical Signal", "Right", 0.75);

# Adding Properties
addproperty("ring_resonator", "phase", "Standard", type="Number", from=-4*pi, to=4*pi, kind="FixedUnit", unit="", default_value=(rand * 4 * pi - 2 * pi));
addproperty("ring_resonator", "radius", "Standard", type="Number", from=0, to=1e100, kind="FixedUnit", unit="", default_value=20e-6);
addproperty("ring_resonator", "coupling", "Standard", type="Number", from=0, to=1, kind="FixedUnit", unit="", default_value=0.5);
addproperty("ring_resonator", "wavelength", "Standard", type="Number", from=-1e100, to=1e100, kind="FixedUnit", unit="", default_value=1550e-9);
addproperty("ring_resonator", "left_edge_length", "Standard", type="Number", from=0, to=1e100, kind="FixedUnit", unit="", default_value=10e-6);
addproperty("ring_resonator", "right_edge_length", "Standard", type="Number", from=0, to=1e100, kind="FixedUnit", unit="", default_value=10e-6);
addproperty("ring_resonator", "wg_insertion_loss", "Standard", type="Number", from=-1e100, to=1e100, kind="FixedUnit", unit="", default_value=0);
addproperty("ring_resonator", "dc_insertion_loss", "Standard", type="Number", from=-1e100, to=1e100, kind="FixedUnit", unit="", default_value=0);
addproperty("ring_resonator", "bend_insertion_loss", "Standard", type="Number", from=-1e100, to=1e100, kind="FixedUnit", unit="", default_value=0);
addproperty("ring_resonator", "straight_n_eff", "Standard", type="Number", from=0, to=1e100, kind="FixedUnit", unit="", default_value=1);
addproperty("ring_resonator", "straight_n_grp", "Standard", type="Number", from=0, to=1e100, kind="FixedUnit", unit="", default_value=1);
addproperty("ring_resonator", "bend_n_eff", "Standard", type="Number", from=0, to=1e100, kind="FixedUnit", unit="", default_value=1);
addproperty("ring_resonator", "bend_n_grp", "Standard", type="Number", from=0, to=1e100, kind="FixedUnit", unit="", default_value=1);
addproperty("ring_resonator", "center_wavelength", "Standard", type="Number", from=-1e100, to=1e100, kind="FixedUnit", unit="", default_value=1550e-9);
annotateproperty("ring_resonator", "phase", annotate_all >= 1);
annotateproperty("ring_resonator", "coupling", annotate_all >= 1);
annotateproperty("ring_resonator", "wavelength", annotate_all >= 1);
annotateproperty("ring_resonator", "radius", annotate_all >= 3);
annotateproperty("ring_resonator", "left_edge_length", annotate_all >= 3);
annotateproperty("ring_resonator", "right_edge_length", annotate_all >= 3);
annotateproperty("ring_resonator", "wg_insertion_loss", annotate_all >= 3);
annotateproperty("ring_resonator", "dc_insertion_loss", annotate_all >= 3);
annotateproperty("ring_resonator", "bend_insertion_loss", annotate_all >= 3);
annotateproperty("ring_resonator", "straight_n_eff", annotate_all >= 3);
annotateproperty("ring_resonator", "straight_n_grp", annotate_all >= 3);
annotateproperty("ring_resonator", "bend_n_eff", annotate_all >= 3);
annotateproperty("ring_resonator", "bend_n_grp", annotate_all >= 3);
annotateproperty("ring_resonator", "center_wavelength", annotate_all >= 3);

# Change to Compound's Scope
groupscope("ring_resonator");

# Renaming Ports/Relays
select("RELAY_1");
set("name", "RO_LT");
select("RELAY_2");
set("name", "RO_LB");
select("RELAY_3");
set("name", "RO_RT");
select("RELAY_4");
set("name", "RO_RB");

# Adding Elements
addelement("Waveguide Coupler");
set("name", "DC_T");
addelement("Waveguide Coupler");
set("name", "DC_B");
addelement("Optical Phase Shift");
set("name", "OPS_CW");
addelement("Optical Phase Shift");
set("name", "OPS_CCW");
addelement("Optical Circulator");
set("name", "CIR_T");
addelement("Optical Circulator");
set("name", "CIR_B");
addelement("Waveguide Arc Bend");
set("name", "WAB_R");
if (waveguides) {
    addelement("Straight Waveguide");
    set("name", "SW_TL");
    addelement("Straight Waveguide");
    set("name", "SW_TR");
    addelement("Straight Waveguide");
    set("name", "SW_BL");
    addelement("Straight Waveguide");
    set("name", "SW_BR");
}

# Positioning Elements
x_off = 100;
y_off = 100;

setnamed("RO_LT", "x position", x_off);
setnamed("RO_LT", "y position", y_off);
flipelement("RO_LT");
setnamed("DC_T", "x position", x_off + 580);
setnamed("DC_T", "y position", y_off + 3);
setnamed("RO_RT", "x position", x_off + 1200);
setnamed("RO_RT", "y position", getnamed("RO_LT", "y position"));
setnamed("CIR_T", "x position", x_off + 350);
setnamed("CIR_T", "y position", y_off + 200);
rotateelement("CIR_T");
setnamed("OPS_CW", "x position", getnamed("CIR_T", "x position") - 134);
setnamed("OPS_CW", "y position", y_off + 400);
rotateelement("OPS_CW"); flipelement("OPS_CW");
setnamed("OPS_CCW", "x position", getnamed("CIR_T", "x position") + 16);
setnamed("OPS_CCW", "y position", y_off + 400);
rotateelement("OPS_CCW");
setnamed("CIR_B", "x position", getnamed("CIR_T", "x position"));
setnamed("CIR_B", "y position", y_off + 600);
rotateelement("CIR_B");
setnamed("WAB_R", "x position", x_off + 800);
setnamed("WAB_R", "y position", y_off + 400);
rotateelement("WAB_R");
setnamed("DC_B", "x position", getnamed("DC_T", "x position"));
setnamed("DC_B", "y position", y_off + 800);
setnamed("RO_LB", "x position", getnamed("RO_LT", "x position"));
setnamed("RO_LB", "y position", getnamed("DC_B", "y position") + 35);
setnamed("RO_RB", "x position", getnamed("RO_RT", "x position"));
setnamed("RO_RB", "y position", getnamed("RO_LB", "y position"));
flipelement("RO_LB");
if (waveguides) {
    setnamed("SW_TL", "x position", x_off + 250);
    setnamed("SW_TL", "y position", getnamed("RO_LT", "y position") - 16);
    setnamed("SW_TR", "x position", x_off + 900);
    setnamed("SW_TR", "y position", getnamed("RO_LT", "y position") - 16);
    setnamed("SW_BL", "x position", getnamed("SW_TL", "x position"));
    setnamed("SW_BL", "y position", getnamed("RO_LB", "y position") - 16);
    setnamed("SW_BR", "x position", getnamed("SW_TR", "x position"));
    setnamed("SW_BR", "y position", getnamed("RO_LB", "y position") - 16);
}

# Setting Element Properties
setexpression("OPS_CW", "phase shift", "phase");
setexpression("OPS_CCW", "phase shift", "-phase");
setexpression("DC_T", "coupling coefficient 1", "coupling");
setexpression("DC_T", "coupling coefficient 2", "coupling");
setexpression("DC_T", "insertion loss", "dc_insertion_loss");
setexpression("DC_B", "coupling coefficient 1", "coupling");
setexpression("DC_B", "coupling coefficient 2", "coupling");
setexpression("DC_B", "insertion loss", "dc_insertion_loss");
setexpression("WAB_R", "radius", "radius");
setexpression("WAB_R", "frequency", "c/wavelength");
setexpression("WAB_R", "loss 1", "bend_insertion_loss");
setexpression("WAB_R", "loss 2", "bend_insertion_loss");
setexpression("WAB_R", "effective index 1", "bend_n_eff");
setexpression("WAB_R", "effective index 2", "bend_n_eff");
setexpression("WAB_R", "group index 1", "bend_n_grp");
setexpression("WAB_R", "group index 2", "bend_n_grp");
setnamed("WAB_R", "angle", 2*pi);
setnamed("CIR_T", "insertion loss", 1e-100);
setnamed("CIR_B", "insertion loss", 1e-100);
setnamed("CIR_T", "isolation", 1e100);
setnamed("CIR_B", "isolation", 1e100);
setnamed("CIR_T", "return loss", 1e100);
setnamed("CIR_B", "return loss", 1e100);
setnamed("OPS_CW", "configuration", "unidirectional");
setnamed("OPS_CCW", "configuration", "unidirectional");
if (waveguides) {
    setexpression("SW_TL", "length", "left_edge_length");
    setexpression("SW_TR", "length", "right_edge_length");
    setexpression("SW_BL", "length", "left_edge_length");
    setexpression("SW_BR", "length", "right_edge_length");
    setexpression("SW_TL", "loss 1", "wg_insertion_loss * 100");
    setexpression("SW_TR", "loss 1", "wg_insertion_loss * 100");
    setexpression("SW_BL", "loss 1", "wg_insertion_loss * 100");
    setexpression("SW_BR", "loss 1", "wg_insertion_loss * 100");
    setexpression("SW_TL", "loss 2", "wg_insertion_loss * 100");
    setexpression("SW_TR", "loss 2", "wg_insertion_loss * 100");
    setexpression("SW_BL", "loss 2", "wg_insertion_loss * 100");
    setexpression("SW_BR", "loss 2", "wg_insertion_loss * 100");
    setexpression("SW_TL", "effective index 1", "straight_n_eff");
    setexpression("SW_TR", "effective index 1", "straight_n_eff");
    setexpression("SW_BL", "effective index 1", "straight_n_eff");
    setexpression("SW_BR", "effective index 1", "straight_n_eff");
    setexpression("SW_TL", "effective index 2", "straight_n_eff");
    setexpression("SW_TR", "effective index 2", "straight_n_eff");
    setexpression("SW_BL", "effective index 2", "straight_n_eff");
    setexpression("SW_BR", "effective index 2", "straight_n_eff");
    setexpression("SW_TL", "group index 1", "straight_n_grp");
    setexpression("SW_TR", "group index 1", "straight_n_grp");
    setexpression("SW_BL", "group index 1", "straight_n_grp");
    setexpression("SW_BR", "group index 1", "straight_n_grp");
    setexpression("SW_TL", "group index 2", "straight_n_grp");
    setexpression("SW_TR", "group index 2", "straight_n_grp");
    setexpression("SW_BL", "group index 2", "straight_n_grp");
    setexpression("SW_BR", "group index 2", "straight_n_grp");
    setexpression("SW_TL", "frequency", "center_wavelength");
    setexpression("SW_TR", "frequency", "center_wavelength");
    setexpression("SW_BL", "frequency", "center_wavelength");
    setexpression("SW_BR", "frequency", "center_wavelength");
}

# Adding Element Connections
if (waveguides) {
    connect("DC_T", "port 1", "SW_TL", "port 2");
    connect("SW_TL", "port 1", "RO_LT", "port");
} else { connect("DC_T", "port 1", "RO_LT", "port"); }
connect("DC_T", "port 2", "CIR_T", "port 1");
if (waveguides) {
    connect("DC_T", "port 3", "SW_TR", "port 1");
    connect("SW_TR", "port 2", "RO_RT", "port");
} else { connect("DC_T", "port 3", "RO_RT", "port"); }
connect("DC_T", "port 4", "WAB_R", "port 1");
connect("DC_B", "port 1", "CIR_B", "port 2");
if (waveguides) {
    connect("DC_B", "port 2", "SW_BL", "port 2");
    connect("SW_BL", "port 1", "RO_LB", "port");
} else { connect("DC_B", "port 2", "RO_LB", "port"); }
connect("DC_B", "port 3", "WAB_R", "port 2");
if (waveguides) {
    connect("DC_B", "port 4", "SW_BR", "port 1");
    connect("SW_BR", "port 2", "RO_RB", "port");
} else { connect("DC_B", "port 4", "RO_RB", "port"); }
connect("CIR_T", "port 2", "OPS_CCW", "input");
connect("CIR_T", "port 3", "OPS_CW", "output");
connect("CIR_B", "port 1", "OPS_CCW", "output");
connect("CIR_B", "port 3", "OPS_CW", "input");

# Array of Elements
multiper_elements = {"RO_LT", "RO_LB", "RO_RT", "RO_RB", "DC_T", "DC_B", "OPS_CW", "OPS_CCW", "CIR_T", "CIR_B", "WAB_R"};    
W_elements = {"SW_TL", "SW_TR", "SW_BL", "SW_BR"};
if (waveguides) {
    temp = cell(length(multiper_elements) + 4);
    for (i=1:length(multiper_elements)) { temp{i} = multiper_elements{i}; }
    for (i=1:length(W_elements)) { temp{length(multiper_elements) + i} = W_elements{i}; }
    multiper_elements = temp;
}

# Hiding Element Annotations
for (i = 1:length(multiper_elements)) { setnamed(multiper_elements{i}, "annotate", annotate_all >= 3); }

# For Recording/Degugging
if (record_all) {
    # Adding Analyzers
    optical_analysers_ports = {"RO_LT", "RO_LB", "RO_RT", "RO_RB", "DC_T_1", "DC_T_2", "DC_T_3", "DC_T_4", "DC_B_1", "DC_B_2", "DC_B_3", "DC_B_4", "OPS_CW", "OPS_CCW", "CIR_T_1", "CIR_T_2", "CIR_T_3", "CIR_B_1", "CIR_B_2", "CIR_B_3", "WAB_R_1", "WAB_R_2"};
    if (waveguides) {
        temp = cell(length(optical_analysers_ports) + 4 * 2);
        for (i=1:length(optical_analysers_ports)) { temp{i} = optical_analysers_ports{i}; }
        for (i=1:length(W_elements)) {
            temp{length(optical_analysers_ports) + 2 * (i-1) + 1} = W_elements{i} + "_1";
            temp{length(optical_analysers_ports) + 2 * (i-1) + 2} = W_elements{i} + "_2";
        }
        optical_analysers_ports = temp;
    }

    for (i = 1:length(optical_analysers_ports)) {
        addelement("Optical Oscilloscope");
        set("name", "OOSC_" + optical_analysers_ports{i});
        addelement("Optical Spectrum Analyzer");
        set("name", "OSA_" + optical_analysers_ports{i});
        addelement("Optical Power Meter");
        set("name", "OPM_" + optical_analysers_ports{i});
    }


    # Adding Analyzers Connections
    connections = {"RO_LT", "RO_LB", "RO_RT", "RO_RB"};
    for (i=1:length(connections)) {
        connect(connections{i}, "port", "OOSC_" + connections{i}, "input");
        connect(connections{i}, "port", "OSA_" + connections{i}, "input");
        connect(connections{i}, "port", "OPM_" + connections{i}, "input");
    }
    connections = {"OPS_CW", "OPS_CCW"};
    for (i=1:length(connections)) {
        connect(connections{i}, "output", "OOSC_" + connections{i}, "input");
        connect(connections{i}, "output", "OSA_" + connections{i}, "input");
        connect(connections{i}, "output", "OPM_" + connections{i}, "input");
    }
    connections = {"DC_T_1", "DC_T_2", "DC_T_3", "DC_T_4", "DC_B_1", "DC_B_2", "DC_B_3", "DC_B_4", "CIR_T_1", "CIR_T_2", "CIR_T_3", "CIR_B_1", "CIR_B_2", "CIR_B_3", "WAB_R_1", "WAB_R_2"};
    for (i=1:length(connections)) {
        element = substring(connections{i}, 1, length(connections{i}) - 2);
        port_number = substring(connections{i}, length(connections{i}), 1);
        connect(element, "port " + port_number, "OOSC_" + connections{i}, "input");
        connect(element, "port " + port_number, "OSA_" + connections{i}, "input");
        connect(element, "port " + port_number, "OPM_" + connections{i}, "input");
    }
    if (waveguides) {
        for (i=1:length(W_elements)) { 
            connect(W_elements{i}, "port 1", "OOSC_" + W_elements{i} + "_1", "input");
            connect(W_elements{i}, "port 1", "OSA_" + W_elements{i} + "_1", "input");
            connect(W_elements{i}, "port 1", "OPM_" + W_elements{i} + "_1", "input");
            connect(W_elements{i}, "port 2", "OOSC_" + W_elements{i} + "_2", "input");
            connect(W_elements{i}, "port 2", "OSA_" + W_elements{i} + "_2", "input");
            connect(W_elements{i}, "port 2", "OPM_" + W_elements{i} + "_2", "input");
        }
    }

    # Positioning Elements
    min_x = 1e100;
    min_y = 1e100;
    max_x = 0;
    max_y = 0;
    for (i=1:length(multiper_elements)) { 
        element_x = getnamed(multiper_elements{i}, "x position");
        element_y = getnamed(multiper_elements{i}, "y position");

        if (element_x < min_x) { min_x = element_x; }
        if (element_y < min_y) { min_y = element_y; }
        if (element_x > max_x) { max_x = element_x; }
        if (element_y > max_y) { max_y = element_y; }
    }
    min_x = min_x + 150;
    max_x = max_x - 300;

    up_element = {{"RO_LT", 50}, {"DC_T_1", -50}, {"DC_T_2", -150}, {"DC_T_3", 85}, {"DC_T_4", 185}, {"RO_RT", -50}};
    down_element = {{"RO_LB", 50}, {"DC_B_1", -50}, {"DC_B_2", -150}, {"DC_B_3", 85}, {"DC_B_4", 185}, {"RO_RB", -50}};
    left_element = {{"CIR_T_1", -50}, {"CIR_T_2", 85}, {"CIR_T_3", 16}, {"OPS_CW", -50}, {"OPS_CCW", 50}, {"CIR_B_1", -50}, {"CIR_B_2", 85}, {"CIR_B_3", 16}};
    right_element = {{"WAB_R_1", -50}, {"WAB_R_2", 85}};
    if (waveguides) {
        temp = cell(length(up_element) + 4);
        for (i=1:length(up_element)) { temp{i} = up_element{i}; }
        temp{length(up_element) + 1} = {"SW_TL_1", -50};
        temp{length(up_element) + 2} = {"SW_TL_2", 85};
        temp{length(up_element) + 3} = {"SW_TR_1", -50};
        temp{length(up_element) + 4} = {"SW_TR_2", 85};
        up_element = temp;

        temp = cell(length(down_element) + 4);
        for (i=1:length(down_element)) { temp{i} = down_element{i}; }
        temp{length(down_element) + 1} = {"SW_BL_1", -50};
        temp{length(down_element) + 2} = {"SW_BL_2", 85};
        temp{length(down_element) + 3} = {"SW_BR_1", -50};
        temp{length(down_element) + 4} = {"SW_BR_2", 85};
        down_element = temp;
    }

    for (i=1:length(up_element)) {
        port_element = up_element{i}{1};
        element = port_element;
        try {
            port_num = str2num(substring(port_element, length(port_element), 1));
            element = substring(port_element, 1, length(port_element) - 2);
        } catch (error_msg);
        offset = up_element{i}{2};
        setnamed("OOSC_" + port_element, "x position", offset + getnamed(element, "x position"));
        setnamed("OOSC_" + port_element, "y position", min_y - 100);
        rotateelement("OOSC_" + port_element); rotateelement("OOSC_" + port_element); rotateelement("OOSC_" + port_element);
        setnamed("OSA_" + port_element, "x position", offset + getnamed(element, "x position"));
        setnamed("OSA_" + port_element, "y position", min_y - 200);
        rotateelement("OSA_" + port_element); rotateelement("OSA_" + port_element); rotateelement("OSA_" + port_element);
        setnamed("OPM_" + port_element, "x position", offset + getnamed(element, "x position"));
        setnamed("OPM_" + port_element, "y position", min_y - 300);
        rotateelement("OPM_" + port_element); rotateelement("OPM_" + port_element); rotateelement("OPM_" + port_element);
    }

    for (i=1:length(down_element)) {
        port_element = down_element{i}{1};
        element = port_element;
        try {
            port_num = str2num(substring(port_element, length(port_element), 1));
            element = substring(port_element, 1, length(port_element) - 2);
        } catch (error_msg);
        offset = down_element{i}{2};
        setnamed("OOSC_" + port_element, "x position", offset + getnamed(element, "x position"));
        setnamed("OOSC_" + port_element, "y position", max_y + 100);
        rotateelement("OOSC_" + port_element);
        setnamed("OSA_" + port_element, "x position", offset + getnamed(element, "x position"));
        setnamed("OSA_" + port_element, "y position", max_y + 200);
        rotateelement("OSA_" + port_element);
        setnamed("OPM_" + port_element, "x position", offset + getnamed(element, "x position"));
        setnamed("OPM_" + port_element, "y position", max_y + 300);
        rotateelement("OPM_" + port_element);
    }

    for (i=1:length(left_element)) {
        port_element = left_element{i}{1};
        element = port_element;
        try {
            port_num = str2num(substring(port_element, length(port_element), 1));
            element = substring(port_element, 1, length(port_element) - 2);
        } catch (error_msg);
        offset = left_element{i}{2};
        setnamed("OOSC_" + port_element, "x position", min_x - 100);
        setnamed("OOSC_" + port_element, "y position", offset + getnamed(element, "y position"));
        rotateelement("OOSC_" + port_element); rotateelement("OOSC_" + port_element);
        setnamed("OSA_" + port_element, "x position", min_x - 200);
        setnamed("OSA_" + port_element, "y position", offset + getnamed(element, "y position"));
        rotateelement("OSA_" + port_element); rotateelement("OSA_" + port_element);
        setnamed("OPM_" + port_element, "x position", min_x - 300);
        setnamed("OPM_" + port_element, "y position", offset + getnamed(element, "y position"));
        rotateelement("OPM_" + port_element); rotateelement("OPM_" + port_element);
    }

    for (i=1:length(right_element)) {
        port_element = right_element{i}{1};
        element = port_element;
        try {
            port_num = str2num(substring(port_element, length(port_element), 1));
            element = substring(port_element, 1, length(port_element) - 2);
        } catch (error_msg);
        offset = right_element{i}{2};
        setnamed("OOSC_" + port_element, "x position", max_x + 100);
        setnamed("OOSC_" + port_element, "y position", offset + getnamed(element, "y position"));
        setnamed("OSA_" + port_element, "x position", max_x + 200);
        setnamed("OSA_" + port_element, "y position", offset + getnamed(element, "y position"));
        setnamed("OPM_" + port_element, "x position", max_x + 300);
        setnamed("OPM_" + port_element, "y position", offset + getnamed(element, "y position"));
    }


    # Hiding Analyzers Annotations
    for (i = 1:length(optical_analysers_ports)) {
        setnamed("OOSC_" + optical_analysers_ports{i}, "annotate", annotate_all >= 6);
        setnamed("OSA_" + optical_analysers_ports{i}, "annotate", annotate_all >= 6);
        setnamed("OPM_" + optical_analysers_ports{i}, "annotate", annotate_all >= 6);
    }
}

groupscope("::Root Element");

if (getvariable("main__", "") == currentscriptname) {
    main__ = "";
}